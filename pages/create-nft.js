import React, { useState } from "react";
import { uploadMetaToIPFS } from "../utils/pinata";
import { uploadImagetoIPFS } from "../utils/pinata";
import { NavBar } from "../components/NavBar";
import useBlockchain from "../hooks/use-blockchain";
import Head from "next/head";
import { useRouter } from "next/router";
import { ethers } from "ethers";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const JWT =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiJkZGU5ZTQxYi04MTc1LTQwODEtYjhjNy03ZWI3YTQ5NWMxYzciLCJlbWFpbCI6InVtZXJhcmlmMDFAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInBpbl9wb2xpY3kiOnsicmVnaW9ucyI6W3siaWQiOiJGUkExIiwiZGVzaXJlZFJlcGxpY2F0aW9uQ291bnQiOjF9XSwidmVyc2lvbiI6MX0sIm1mYV9lbmFibGVkIjpmYWxzZSwic3RhdHVzIjoiQUNUSVZFIn0sImF1dGhlbnRpY2F0aW9uVHlwZSI6InNjb3BlZEtleSIsInNjb3BlZEtleUtleSI6IjJkMTA2OGM4OGQyMjAwYWU0NWViIiwic2NvcGVkS2V5U2VjcmV0IjoiZTg1NGJjZTc3MmFkYzZkZGUzODM3ZTdhNDhmNTRhNDg4OWVhM2QyMmVjMmQ3YjhkMzU3MWNiZGE3NjA5NGQ0YSIsImlhdCI6MTY2MDI1MDAzOX0.12FCVLNq-HnaqrsGmbXEe-DSjyraPRrUputaEtopvgU";

const CreateNFT = () => {
  const [fileImg, setImage] = useState();
  const [imgUrl, setImgUrl] = useState("");
  const [formInput, updateFormInput] = useState({
    price: "",
    name: "",
    description: "",
  });
  const [state, setState] = useState("Create NFT");
  const { contract, signer } = useBlockchain();
  const router = useRouter();

  const { name, description, price } = formInput;

  async function uploadToPinata() {
    const img = await uploadImagetoIPFS(fileImg);
    if (!img) return;
    const data = JSON.stringify({
      name,
      description,
      image: img,
    });
    const config = {
      method: "post",
      url: "https://api.pinata.cloud/pinning/pinJSONToIPFS",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${JWT}`,
      },
      data: data,
    };
    const nftUrl = await uploadMetaToIPFS(name, description, config);
    console.log(nftUrl);
    return nftUrl;
  }

  async function createNFT() {
    if (!signer) {
      toast.error("Connect Wallet");
      return;
    }
    setState("Creating NFT - Please Wait");
    const tokenURI = await uploadToPinata();
    toast.success("Metadata Uploaded to IPFS");
    if (!price && !tokenURI) {
      toast.error("Please check NFT's inputs");
    }
    toast("Creating Your NFT");
    const price = ethers.utils.parseUnits(formInput.price, "ether");
    let listingPrice = await contract.getListingPrice();
    listingPrice = listingPrice.toString();
    let transaction = await contract.createToken(tokenURI, price, {
      value: listingPrice,
    });
    await transaction.wait();
    toast.success("NFT Created");
    router.push("/explore");
  }

  return (
    <div>
      <Head>
        <title>NFT ZONE</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <NavBar />
      <div className="mt-[50px]" />

      <div className="flex justify-center">
        <div className="w-1/2 flex flex-col pb-12">
          <h1 className="text-4xl font-semibold">Create NFT</h1>
          <input
            placeholder="Asset Name"
            className="mt-8 border rounded p-4"
            onChange={(e) =>
              updateFormInput({ ...formInput, name: e.target.value })
            }
          />
          <textarea
            placeholder="Asset Description"
            className="mt-2 border rounded p-4"
            onChange={(e) =>
              updateFormInput({ ...formInput, description: e.target.value })
            }
          />
          <input
            placeholder="Asset Price in Eth"
            className="mt-2 border rounded p-4"
            onChange={(e) =>
              updateFormInput({ ...formInput, price: e.target.value })
            }
          />
          <div className="mt-4" />
          <input
            type="file"
            onChange={(e) => {
              setImage(e.target.files[0]);
            }}
            required
          />

          <button
            onClick={createNFT}
            className="font-bold mt-4  bg-black text-white rounded p-4 shadow-lg"
          >
            {state}
          </button>
          <ToastContainer
            position="top-right"
            autoClose={2000}
            hideProgressBar={false}
            newestOnTop={false}
            closeOnClick
            rtl={false}
            draggable
          />
        </div>
      </div>
    </div>
  );
};

export default CreateNFT;
